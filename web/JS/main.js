function count_rabbits() {
    for(var i=1; i<=3; i++) {
        alert("Кролик номер "+i)
    }
}

/* Закомментировали код
2
alert('Привет');
3
*/

var $ = 5;  // объявили переменную с именем '$'
var _ = 15; // переменная с именем '_'

alert($);

var u;
alert(u); // выведет "undefined"

// Есть 5 «примитивных» типов: number, string, boolean, null, undefined и объекты object.

/* ****************************************************** */

var a = "2";
var b = "3";
 
alert( a + b ); // "23", так как бинарный плюс складывает строки
alert( +a + b ); // "23", второй операнд - всё ещё строка

alert( +a + +b); // 5, число, так как оба операнда предварительно преобразованы в числа

/* ****************************************************** */

var a, b, c;
a = b = c = 2 + 2;

var a = 1;
var b = 2;
var c = 3 - (a = b + 1);

alert(a); // 3
alert(c); // 0
// В примере выше результатом (a = b + 1) является значение, которое записывается в a (т.е. 3). Оно используется для вычисления c.

/* ****************************************************** */

alert( "2" > "14" ); // true, неверно, ведь 2 не больше 14
alert( +"2" > +"14" ); // false, теперь правильно

alert(0 == false); // true, т.к. false преобразуется к 0
alert(0 === false); // false, т.к. типы различны
// Для проверки равенства без преобразования типов используются операторы строгого равенства === (тройное равно) и !==.

// Значения null и undefined равны == друг другу и не равны чему бы то ни было ещё. Это жёсткое правило буквально прописано в спецификации языка.
// При преобразовании в число null становится 0, а undefined становится NaN.
alert(null >= 0); // true
alert(null > 0); // false
alert(null == 0); // false

alert( 12.345^0 ); // 12

// Проверка на -1 пригождается, например, при поиске символа в строке. Вызов str.indexOf("подстрока") возвращает позицию подстроки в str, или -1 если не нашёл.
var str = "Проверка";
if (~str.indexOf("верка")) { // Сочетание "if (~...indexOf)" читается как "если найдено"
  alert('найдено!');
}

alert( 1 << 2 ); // 1*(2*2) = 4
alert( 1 << 3 ); // 1*(2*2*2) = 8
alert( 3 << 3 ); // 3*(2*2*2) = 24

function isInteger(num) {
  return (num ^ 0) === num;
}
 
alert( isInteger(1) ); // true
alert( isInteger(1.5) ); // false
alert( isInteger(-0.5) ); // false

/* ****************************************************** */

var years = prompt('Сколько вам лет?', 100);  // модальное окно с заголовком arg1, полем для ввода текста, заполненным строкой по умолчанию arg2 и кнопками OK/CANCEL.
alert('Вам ' + years + ' лет!')

var isAdmin = confirm("Вы - администратор?");
alert(isAdmin);

/* ****************************************************** */

if ("0") {
  alert('Привет'); // Любая строка, кроме пустой (а здесь она не пустая), в логическом контексте является true.
}

result = (a + b < 4) ? 'Мало' : 'Много';

var a = prompt('a?', 1);
 
var res = (a == 1) ? 'значение1' :
  (a == 2) ? 'значение2' :
  (a > 2) ? 'значение3' :
  'значение4';
 
alert(res);

/* ****************************************************** */

alert( 1 || 0 ); // 1
alert( true || 'неважно что'); // true
 
alert( null || 1 ); // 1
alert( undefined || 0 ); // 0


// Это используют, в частности, чтобы выбрать первое «истинное» значение из списка:
var undef; // переменная не присвоена, т.е. равна undefined
var zero = 0;
var emptyStr = "";
var msg = "Привет!";
 
var result = undef || zero || emptyStr || msg || 0;
 
alert(result) // выведет "Привет!" - первое значение, которое является true


/* ****************************************************** */

var i = 3;
while (i) { // при i=0 значение в скобках будет false и цикл остановится
  alert(i);
  i--;
}


var i = 0;
do {
  alert(i);
  i++;
} while (i < 3);

var i;
for (i=0; i<3; i++) {
  alert(i);
}

var i = 0;
for (; i<3; ) {
 // цикл превратился в аналог while (i<3)
}

for (;;) {
  // будет выполняться вечно
}

/* ****************************************************** */

my: {
 
  for (;;) {
    for (i=0; i<10; i++) {
      if (i>4) break my;
    }
  }
   
  some_code; // произвольный участок кода
 
}
alert("После my"); // (*)
// В примере выше, break перепрыгнет через some_code, выполнение продолжится сразу после блока my, со строки (*). Возможность ставить метку на блоке используется редко. Обычно метки ставятся перед циклом.

/* ****************************************************** */

// выводит все простые числа из интервала от 2 до 10
nextPrime:
for(var i=2; i<10; i++) {
 
  for(var j=2; j<i; j++) {
    if ( i % j == 0) continue nextPrime;
  }
   
  alert(i);  // простое
}


/* ****************************************************** */

var a = 2+2;
 
switch (a) {
  case 2:
  case 3:
    alert('Маловато');
    break;
  case 4:
    alert('В точку!');
    break;
  case 5:
    alert('Перебор');
    break;
  default:
    alert('Я таких значений не знаю');
}


/* ****************************************************** */

function showMessage(from, text) {
  if (text === undefined) {
    text = 'текст не передан';
  }
 
  alert(from + ": " + text);
}
 
showMessage("Маша", "Привет!"); // Маша: Привет!
showMessage("Маша"); // Маша: текст не передан

// аргумент отсутствует, если передана пустая строка, 0, или вообще любое значение, которое в булевом виде является false.
function showMessage(from, text) {
  text = text || 'текст не передан';
 
  // ...
}

/* ****************************************************** */

// В случае, когда функция не вернула значение или return был без аргументов, считается что она вернула undefined:

function doNothing() { /* пусто */ }
alert( doNothing() ); // undefined


function doNothing() {
  return;
}
alert( doNothing() === undefined ); // true


/* ****************************************************** */

function pow(x, n) {
	var result = x;

	for(var i = 1; i < n; i++) {
	  result *= x;
	}

	return result;
}


function pow(x, n) {
  // пока n!=1, сводить вычисление pow(..,n) к pow(..,n-1)
  return (n != 1) ? x*pow(x, n-1) : x;
}
 
alert( pow(2, 3) ); // 8

/* ****************************************************** */

function fib(n) {
  var a = 1, b = 1;
  for (var i = 3; i <= n; i++) {
    var c = a + b;
    a = b;
    b = c;
  }         
  return b;
}
 
alert( fib(3) ); // 2
alert( fib(7) ); // 13
alert( fib(77)); // 5527939700884757


/* ****************************************************** */

var n = 12.345;
 
alert( n.toFixed(2) ); // "12.35"
alert( n.toFixed(0) ); // "12"
alert( n.toFixed(5) ); // "12.34500"

alert( 12.34.toFixed(1) ); // 12.3
// alert( 12.toFixed(1) ); // ошибка!
alert( 12..toFixed(1) ); // 12.0

/* ****************************************************** */
/* ****************************************************** */






