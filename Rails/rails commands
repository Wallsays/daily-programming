rails new sample_app --skip-test-unit

bundle install --without production

rails generate rspec:install

git mv README.rdoc README.md

rm public/hello.html

rails generate controller StaticPages home help --no-test-framework

rails generate controller FooBars baz quux
rails destroy  controller FooBars baz quux

rails generate model Foo bar:string baz:integer
rails destroy model Foo

rake db:migrate
rake db:rollback
rake db:migrate VERSION=0

rails generate integration_test static_pages
bundle exec rspec spec/requests/static_pages_spec.rb

mv app/views/layouts/application.html.erb foobar 

bundle exec guard init rspec
# Writing new Guardfile to /Users/mhartl/rails_projects/sample_app/Guardfile
rspec guard added to Guardfile, feel free to edit it

spork --bootstrap
Using RSpec
Bootstrapping /home/dis/Rails/sample_app/spec/spec_helper.rb.
Done. Edit /home/dis/Rails/sample_app/spec/spec_helper.rb now with your favorite text editor and follow the instructions.


rails generate controller Users new --no-test-framework
rails generate integration_test user_pages

heroku login
heroku rename twitte-analog-app
sudo chown waclock /home/waclock/.netrc

bundle exec annotate
Annotated (1): User

rake db:test:prepare

heroku run rake db:migrate

# to debug the error using the Heroku logfile.
heroku logs

rails generate controller Sessions --no-test-framework
rails generate integration_test authentication_pages

//===============================================

You can also deploy the application and even populate the production database with sample users (using the pg:reset task to reset the production database):

$ git push heroku
$ heroku pg:reset DATABASE
$ heroku run rake db:migrate
$ heroku run rake db:populate

git push heroku && heroku pg:reset DATABASE && heroku run rake db:migrate && heroku run rake db:populate

You may have to redeploy to Heroku to force an app restart. Here’s a hack that will force Heroku to restart the application:

$ touch foo
$ git add foo
$ git commit -m "foo"
$ git push heroku

touch foo && git add foo && git commit -m "foo" && git push heroku

rake db:reset && rake db:populate && rake db:test:prepare

//===============================================

$ rails console
>> [1, 2, 3, 4].map { |i| i.to_s }
=> ["1", "2", "3", "4"]

Situations like the one illustrated above, where the same method (e.g., to_s) gets called on each element, are common enough that there’s a shorthand notation using an ampersand & and a symbol corresponding to the method:12

>> [1, 2, 3, 4].map(&:to_s)
=> ["1", "2", "3", "4"]

Using the join method(Section 4.3.1), we can create a string composed of the ids by joining them on comma-space :

>> [1, 2, 3, 4].map(&:to_s).join(', ')
=> "1, 2, 3, 4"

//===============================================

20.years.from_now
$ rails console
>> 1.year.from_now
=> Sun, 13 Mar 2011 03:38:55 UTC +00:00
>> 10.weeks.ago
=> Sat, 02 Jan 2010 03:39:14 UTC +00:00

Rails adds other helpers, too:

>> 1.kilobyte
=> 1024
>> 5.megabytes
=> 5242880

//===============================================

>> email = "MHARTL@example.COM".
>> Digest::MD5::hexdigest(email.downcase)
=> "1fda4469bcbec3badf5418269ffc5968"

//===============================================

Since we’re about to add the ability to create new users through the web, let’s remove the user created at the console in Section 6.3.5. The cleanest way to do this is to reset the database with the db:reset Rake task:

$ bundle exec rake db:reset

After resetting the database, on some systems the test database needs to be re-prepared as well:

$ bundle exec rake db:test:prepare

Finally, on some systems you might have to restart the web server (using Ctrl-C) for the changes to take effect.8

//===============================================

bundle exec rspec spec/requests/user_pages_spec.rb -e "signup page"

(The -e here arranges to run just the examples whose description strings match "signup page". Note in particular that this is not the substring "signup", which would run all the test in Listing 7.16.) To get these tests to pass again and to get our form to render, we must define an @user variable in the controller action corresponding to new.html.erb, i.e., the new action in the Users controller. The form_for helper expects @user to be a User object, and since we’re creating a new user we simply use User.new, as seen in Listing 7.18.

//===============================================

>> include ActionView::Helpers::TextHelper
>> pluralize(1, "error")
=> "1 error"
>> pluralize(5, "error")
=> "5 errors"

//===============================================

Rails environments

Rails comes equipped with three environments: test, development, and production. The default environment for the Rails console is development:

$ rails console
Loading development environment
>> Rails.env
=> "development"
>> Rails.env.development?
=> true
>> Rails.env.test?
=> false

As you can see, Rails provides a Rails object with an env attribute and associated environment boolean methods, so that, for example, Rails.env.test? returns true in a test environment and false otherwise.

If you ever need to run a console in a different environment (to debug a test, for example), you can pass the environment as a parameter to the console script:

$ rails console test
Loading test environment
>> Rails.env
=> "test"
>> Rails.env.test?
=> true

As with the console, development is the default environment for the local Rails server, but you can also run it in a different environment:

  $ rails server --environment production

If you view your app running in production, it won’t work without a production database, which we can create by running rake db:migrate in production:

  $ bundle exec rake db:migrate RAILS_ENV=production

(I find it confusing that the console, server, and migrate commands specify non-default environments in three mutually incompatible ways, which is why I bothered showing all three.)

By the way, if you have deployed your sample app to Heroku, you can see its environment using the heroku command, which provides its own (remote) console:

  $ heroku run console
  Ruby console for yourapp.herokuapp.com
  >> Rails.env
  => "production"
  >> Rails.env.production?
  => true

Naturally, since Heroku is a platform for production sites, it runs each application in a production environment.


//===============================================

По  у мол чан и ю,   кон сол ь   и змен яет  ваш у   базу   дан н ых .   Вместо  этого  можн о  зап у сти ть   кон сол ь ,   которая  откатывает  все
и змен ен и я,   которые  вы  сдел ал и ,   и сп ол ь зу я  rai l s  con sol e —san dbox .

p = Post.new(:content => "A new post")
=> #<Post id: nil, name: nil, title: nil,
content: "A new post", created_at: nil,
updated_at: nil>
>> p.save
=> false
>> p.errors.full_messages
=> ["Name can't be blank", "Title can't be blank", "Title is too short (minimum is 5 characters)"]

//===============================================

$ rails console
>> User.new.new_record?
=> true
>> User.first.new_record?
=> false